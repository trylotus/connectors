// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pair/pair.proto

package pair

import (
	_ "github.com/trylotus/go-lotus-proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Approval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pair        []byte                 `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	Owner       []byte                 `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender     []byte                 `protobuf:"bytes,7,opt,name=spender,proto3" json:"spender,omitempty"`
	Value       string                 `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Approval) Reset() {
	*x = Approval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Approval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Approval) ProtoMessage() {}

func (x *Approval) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Approval.ProtoReflect.Descriptor instead.
func (*Approval) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{0}
}

func (x *Approval) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Approval) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Approval) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Approval) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Approval) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Approval) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Approval) GetSpender() []byte {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (x *Approval) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Burn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pair        []byte                 `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	Sender      []byte                 `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount0     string                 `protobuf:"bytes,7,opt,name=amount0,proto3" json:"amount0,omitempty"`
	Amount1     string                 `protobuf:"bytes,8,opt,name=amount1,proto3" json:"amount1,omitempty"`
	To          []byte                 `protobuf:"bytes,9,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *Burn) Reset() {
	*x = Burn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Burn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Burn) ProtoMessage() {}

func (x *Burn) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Burn.ProtoReflect.Descriptor instead.
func (*Burn) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{1}
}

func (x *Burn) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Burn) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Burn) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Burn) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Burn) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Burn) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Burn) GetAmount0() string {
	if x != nil {
		return x.Amount0
	}
	return ""
}

func (x *Burn) GetAmount1() string {
	if x != nil {
		return x.Amount1
	}
	return ""
}

func (x *Burn) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

type Mint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pair        []byte                 `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	Sender      []byte                 `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount0     string                 `protobuf:"bytes,7,opt,name=amount0,proto3" json:"amount0,omitempty"`
	Amount1     string                 `protobuf:"bytes,8,opt,name=amount1,proto3" json:"amount1,omitempty"`
}

func (x *Mint) Reset() {
	*x = Mint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mint) ProtoMessage() {}

func (x *Mint) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mint.ProtoReflect.Descriptor instead.
func (*Mint) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{2}
}

func (x *Mint) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Mint) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Mint) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Mint) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Mint) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Mint) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Mint) GetAmount0() string {
	if x != nil {
		return x.Amount0
	}
	return ""
}

func (x *Mint) GetAmount1() string {
	if x != nil {
		return x.Amount1
	}
	return ""
}

type Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pair        []byte                 `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	Sender      []byte                 `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
	Amount0In   string                 `protobuf:"bytes,7,opt,name=amount0_in,json=amount0In,proto3" json:"amount0_in,omitempty"`
	Amount1In   string                 `protobuf:"bytes,8,opt,name=amount1_in,json=amount1In,proto3" json:"amount1_in,omitempty"`
	Amount0Out  string                 `protobuf:"bytes,9,opt,name=amount0_out,json=amount0Out,proto3" json:"amount0_out,omitempty"`
	Amount1Out  string                 `protobuf:"bytes,10,opt,name=amount1_out,json=amount1Out,proto3" json:"amount1_out,omitempty"`
	To          []byte                 `protobuf:"bytes,11,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *Swap) Reset() {
	*x = Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

func (x *Swap) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{3}
}

func (x *Swap) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Swap) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Swap) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Swap) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Swap) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Swap) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Swap) GetAmount0In() string {
	if x != nil {
		return x.Amount0In
	}
	return ""
}

func (x *Swap) GetAmount1In() string {
	if x != nil {
		return x.Amount1In
	}
	return ""
}

func (x *Swap) GetAmount0Out() string {
	if x != nil {
		return x.Amount0Out
	}
	return ""
}

func (x *Swap) GetAmount1Out() string {
	if x != nil {
		return x.Amount1Out
	}
	return ""
}

func (x *Swap) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

type Sync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pair        []byte                 `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	Reserve0    string                 `protobuf:"bytes,6,opt,name=reserve0,proto3" json:"reserve0,omitempty"`
	Reserve1    string                 `protobuf:"bytes,7,opt,name=reserve1,proto3" json:"reserve1,omitempty"`
}

func (x *Sync) Reset() {
	*x = Sync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sync) ProtoMessage() {}

func (x *Sync) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sync.ProtoReflect.Descriptor instead.
func (*Sync) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{4}
}

func (x *Sync) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Sync) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Sync) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Sync) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Sync) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Sync) GetReserve0() string {
	if x != nil {
		return x.Reserve0
	}
	return ""
}

func (x *Sync) GetReserve1() string {
	if x != nil {
		return x.Reserve1
	}
	return ""
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pair        []byte                 `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	From        []byte                 `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty"`
	To          []byte                 `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
	Value       string                 `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{5}
}

func (x *Transfer) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Transfer) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Transfer) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Transfer) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Transfer) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Transfer) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Transfer) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Transfer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Trade1Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pair        []byte                 `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade1Min) Reset() {
	*x = Trade1Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade1Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade1Min) ProtoMessage() {}

func (x *Trade1Min) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade1Min.ProtoReflect.Descriptor instead.
func (*Trade1Min) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{6}
}

func (x *Trade1Min) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade1Min) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Trade1Min) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade1Min) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade1Min) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade1Min) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade1Min) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade1Min) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade1Min) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade1Min) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade1Min) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

type Trade10Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pair        []byte                 `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade10Min) Reset() {
	*x = Trade10Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade10Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade10Min) ProtoMessage() {}

func (x *Trade10Min) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade10Min.ProtoReflect.Descriptor instead.
func (*Trade10Min) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{7}
}

func (x *Trade10Min) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade10Min) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Trade10Min) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade10Min) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade10Min) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade10Min) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade10Min) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade10Min) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade10Min) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade10Min) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade10Min) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

type Trade1H struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pair        []byte                 `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade1H) Reset() {
	*x = Trade1H{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade1H) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade1H) ProtoMessage() {}

func (x *Trade1H) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade1H.ProtoReflect.Descriptor instead.
func (*Trade1H) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{8}
}

func (x *Trade1H) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade1H) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Trade1H) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade1H) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade1H) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade1H) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade1H) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade1H) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade1H) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade1H) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade1H) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

type Trade1D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pair        []byte                 `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade1D) Reset() {
	*x = Trade1D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade1D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade1D) ProtoMessage() {}

func (x *Trade1D) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade1D.ProtoReflect.Descriptor instead.
func (*Trade1D) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{9}
}

func (x *Trade1D) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade1D) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Trade1D) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade1D) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade1D) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade1D) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade1D) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade1D) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade1D) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade1D) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade1D) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

type Trade1Mon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pair        []byte                 `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade1Mon) Reset() {
	*x = Trade1Mon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade1Mon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade1Mon) ProtoMessage() {}

func (x *Trade1Mon) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade1Mon.ProtoReflect.Descriptor instead.
func (*Trade1Mon) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{10}
}

func (x *Trade1Mon) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade1Mon) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Trade1Mon) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade1Mon) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade1Mon) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade1Mon) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade1Mon) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade1Mon) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade1Mon) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade1Mon) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade1Mon) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

type Trade1Y struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pair        []byte                 `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade1Y) Reset() {
	*x = Trade1Y{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_pair_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade1Y) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade1Y) ProtoMessage() {}

func (x *Trade1Y) ProtoReflect() protoreflect.Message {
	mi := &file_pair_pair_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade1Y.ProtoReflect.Descriptor instead.
func (*Trade1Y) Descriptor() ([]byte, []int) {
	return file_pair_pair_proto_rawDescGZIP(), []int{11}
}

func (x *Trade1Y) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade1Y) GetPair() []byte {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *Trade1Y) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade1Y) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade1Y) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade1Y) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade1Y) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade1Y) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade1Y) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade1Y) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade1Y) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

var File_pair_pair_proto protoreflect.FileDescriptor

var file_pair_pair_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x61, 0x69, 0x72, 0x2f, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x70, 0x61, 0x69, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6c, 0x6f, 0x74, 0x75, 0x73, 0x2f,
	0x6c, 0x6f, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x02, 0x0a, 0x08,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08,
	0x01, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x07,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x42, 0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74,
	0x73, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x1a, 0x02, 0x74, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x04, 0x42, 0x75, 0x72, 0x6e,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12,
	0x1e, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x12,
	0x1e, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x12,
	0x16, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30,
	0x02, 0x08, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x3a, 0x42, 0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10,
	0x01, 0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a,
	0x0a, 0x1a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x1a, 0x02, 0x74, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x04,
	0x4d, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02,
	0x08, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x3a, 0x42, 0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74,
	0x73, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x1a, 0x02, 0x74, 0x73, 0x22, 0xc9, 0x03, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12,
	0x1e, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x30, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x09,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x49, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xda, 0xab, 0x30, 0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x4f, 0x75, 0x74,
	0x12, 0x25, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x3a,
	0x42, 0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x1a,
	0x02, 0x74, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2,
	0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda,
	0xab, 0x30, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x30, 0x12, 0x20, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x3a,
	0x42, 0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x1a,
	0x02, 0x74, 0x73, 0x22, 0xcd, 0x02, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12,
	0x1a, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2,
	0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x42, 0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x1a,
	0x02, 0x74, 0x73, 0x22, 0xad, 0x07, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x31, 0x6d, 0x69,
	0x6e, 0x12, 0x46, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1c, 0xe2, 0xab, 0x30, 0x18, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x27, 0x31, 0x20, 0x6d, 0x69, 0x6e,
	0x27, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x01, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0xe2,
	0xab, 0x30, 0x04, 0x70, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x69, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x42, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xda, 0xab,
	0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x61, 0x78, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f,
	0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f,
	0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74,
	0x29, 0x29, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a,
	0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x44, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x69, 0x6e, 0x28, 0x28, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x5f, 0x6f, 0x75, 0x74, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x6a, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x41, 0x6c,
	0x61, 0x73, 0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20,
	0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f,
	0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29,
	0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x08,
	0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c,
	0xe2, 0xab, 0x30, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x2a, 0x29, 0x52, 0x07, 0x74, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30,
	0x5f, 0x62, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xda, 0xab, 0x30, 0x00,
	0xe2, 0xab, 0x30, 0x0f, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f,
	0x69, 0x6e, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x42, 0x75, 0x79, 0x12,
	0x3b, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x10, 0x73,
	0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x52,
	0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0b,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73, 0x75, 0x6d, 0x28, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xda, 0xab,
	0x30, 0x00, 0xe2, 0xab, 0x30, 0x10, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x53,
	0x65, 0x6c, 0x6c, 0x3a, 0x7e, 0xca, 0xab, 0x30, 0x0b, 0x0a, 0x09, 0x1a, 0x04, 0x70, 0x61, 0x69,
	0x72, 0x1a, 0x01, 0x74, 0xd2, 0xab, 0x30, 0x6b, 0x0a, 0x1f, 0x6c, 0x6f, 0x74, 0x75, 0x73, 0x2e,
	0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x32, 0x2e, 0x30, 0x5f, 0x30, 0x5f, 0x30, 0x2e,
	0x70, 0x61, 0x69, 0x72, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x01, 0x22, 0x05, 0x31, 0x20, 0x6d,
	0x69, 0x6e, 0x2a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x32, 0x01, 0x74, 0x32, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x3a, 0x1e, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e,
	0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20,
	0x3e, 0x20, 0x30, 0x22, 0xb0, 0x07, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x31, 0x30, 0x6d,
	0x69, 0x6e, 0x12, 0x47, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1d, 0xe2, 0xab, 0x30, 0x19, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x27, 0x31, 0x30, 0x20, 0x6d,
	0x69, 0x6e, 0x27, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x01, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xd2, 0xab, 0x30, 0x02, 0x08,
	0x01, 0xe2, 0xab, 0x30, 0x04, 0x70, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12,
	0x69, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x42, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20,
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44,
	0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x61, 0x78, 0x28, 0x28, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f,
	0x75, 0x74, 0x29, 0x29, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x61, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x44, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x69, 0x6e, 0x28,
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30,
	0x41, 0x6c, 0x61, 0x73, 0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69,
	0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29,
	0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c, 0x20, 0x74,
	0x73, 0x29, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0c, 0xe2, 0xab, 0x30, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x2a, 0x29, 0x52, 0x07,
	0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x30, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xda, 0xab,
	0x30, 0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x30, 0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x42, 0x75,
	0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30,
	0x10, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74,
	0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x38,
	0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73, 0x75, 0x6d,
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x10, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x31, 0x53, 0x65, 0x6c, 0x6c, 0x3a, 0x7f, 0xca, 0xab, 0x30, 0x0b, 0x0a, 0x09, 0x1a, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x1a, 0x01, 0x74, 0xd2, 0xab, 0x30, 0x6c, 0x0a, 0x1f, 0x6c, 0x6f, 0x74, 0x75,
	0x73, 0x2e, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x32, 0x2e, 0x30, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x01, 0x22, 0x06, 0x31,
	0x30, 0x20, 0x6d, 0x69, 0x6e, 0x2a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x32, 0x01, 0x74,
	0x32, 0x04, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x1e, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75,
	0x74, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x22, 0xad, 0x07, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x31, 0x68, 0x12, 0x47, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1d, 0xe2, 0xab, 0x30, 0x19, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x27, 0x31, 0x20, 0x68, 0x6f,
	0x75, 0x72, 0x27, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x01, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xd2, 0xab, 0x30, 0x02, 0x08,
	0x01, 0xe2, 0xab, 0x30, 0x04, 0x70, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12,
	0x69, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x42, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20,
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44,
	0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x61, 0x78, 0x28, 0x28, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f,
	0x75, 0x74, 0x29, 0x29, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x61, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x44, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x69, 0x6e, 0x28,
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30,
	0x41, 0x6c, 0x61, 0x73, 0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69,
	0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29,
	0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c, 0x20, 0x74,
	0x73, 0x29, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0c, 0xe2, 0xab, 0x30, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x2a, 0x29, 0x52, 0x07,
	0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x30, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xda, 0xab,
	0x30, 0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x30, 0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x42, 0x75,
	0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30,
	0x10, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74,
	0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x38,
	0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73, 0x75, 0x6d,
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x10, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x31, 0x53, 0x65, 0x6c, 0x6c, 0x3a, 0x7f, 0xca, 0xab, 0x30, 0x0b, 0x0a, 0x09, 0x1a, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x1a, 0x01, 0x74, 0xd2, 0xab, 0x30, 0x6c, 0x0a, 0x1f, 0x6c, 0x6f, 0x74, 0x75,
	0x73, 0x2e, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x32, 0x2e, 0x30, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x01, 0x22, 0x06, 0x31,
	0x30, 0x20, 0x6d, 0x69, 0x6e, 0x2a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x32, 0x01, 0x74,
	0x32, 0x04, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x1e, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75,
	0x74, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x22, 0xac, 0x07, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x31, 0x64, 0x12, 0x46, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1c, 0xe2, 0xab, 0x30, 0x18, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x27, 0x31, 0x20, 0x64, 0x61,
	0x79, 0x27, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x01, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61,
	0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01,
	0xe2, 0xab, 0x30, 0x04, 0x70, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x69,
	0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x42, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xda,
	0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x61, 0x78, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31,
	0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75,
	0x74, 0x29, 0x29, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x61,
	0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x44, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x69, 0x6e, 0x28, 0x28,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x41,
	0x6c, 0x61, 0x73, 0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e,
	0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20,
	0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c, 0x20, 0x74, 0x73,
	0x29, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0c, 0xe2, 0xab, 0x30, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x2a, 0x29, 0x52, 0x07, 0x74,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x30, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xda, 0xab, 0x30,
	0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x42, 0x75, 0x79,
	0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x10,
	0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29,
	0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x38, 0x0a,
	0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73, 0x75, 0x6d, 0x28,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xda,
	0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x10, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31,
	0x53, 0x65, 0x6c, 0x6c, 0x3a, 0x7f, 0xca, 0xab, 0x30, 0x0b, 0x0a, 0x09, 0x1a, 0x04, 0x70, 0x61,
	0x69, 0x72, 0x1a, 0x01, 0x74, 0xd2, 0xab, 0x30, 0x6c, 0x0a, 0x1f, 0x6c, 0x6f, 0x74, 0x75, 0x73,
	0x2e, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x32, 0x2e, 0x30, 0x5f, 0x30, 0x5f, 0x30,
	0x2e, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x01, 0x22, 0x06, 0x31, 0x20,
	0x68, 0x6f, 0x75, 0x72, 0x2a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x32, 0x01, 0x74, 0x32,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x1e, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f,
	0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74,
	0x29, 0x20, 0x3e, 0x20, 0x30, 0x22, 0xb0, 0x07, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x31,
	0x6d, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1e, 0xe2, 0xab, 0x30, 0x1a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x27, 0x31, 0x20, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x27, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x01, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xd2, 0xab, 0x30,
	0x02, 0x08, 0x01, 0xe2, 0xab, 0x30, 0x04, 0x70, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x72, 0x12, 0x69, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x42, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e,
	0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20,
	0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c, 0x20, 0x74, 0x73,
	0x29, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x44, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x61, 0x78, 0x28, 0x28, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x5f, 0x6f, 0x75, 0x74, 0x29, 0x29, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x61, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x69,
	0x6e, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0xda, 0xab, 0x30, 0x00, 0xe2,
	0xab, 0x30, 0x41, 0x6c, 0x61, 0x73, 0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31,
	0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75,
	0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e,
	0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c,
	0x20, 0x74, 0x73, 0x29, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0c, 0xe2, 0xab, 0x30, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x2a, 0x29,
	0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x30, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30,
	0x42, 0x75, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xda, 0xab, 0x30, 0x00, 0xe2,
	0xab, 0x30, 0x10, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f,
	0x75, 0x74, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c, 0x6c,
	0x12, 0x38, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73,
	0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x10, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x31, 0x53, 0x65, 0x6c, 0x6c, 0x3a, 0x7f, 0xca, 0xab, 0x30, 0x0b, 0x0a, 0x09, 0x1a,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x1a, 0x01, 0x74, 0xd2, 0xab, 0x30, 0x6c, 0x0a, 0x1f, 0x6c, 0x6f,
	0x74, 0x75, 0x73, 0x2e, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x32, 0x2e, 0x30, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x01, 0x22,
	0x06, 0x31, 0x20, 0x68, 0x6f, 0x75, 0x72, 0x2a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x32,
	0x01, 0x74, 0x32, 0x04, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x1e, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f,
	0x6f, 0x75, 0x74, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x22, 0xad, 0x07, 0x0a, 0x07, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x31, 0x79, 0x12, 0x47, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1d, 0xe2, 0xab, 0x30,
	0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x27, 0x31, 0x20,
	0x79, 0x65, 0x61, 0x72, 0x27, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x01, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xd2, 0xab, 0x30,
	0x02, 0x08, 0x01, 0xe2, 0xab, 0x30, 0x04, 0x70, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x72, 0x12, 0x69, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x42, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e,
	0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20,
	0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c, 0x20, 0x74, 0x73,
	0x29, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x44, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x61, 0x78, 0x28, 0x28, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x5f, 0x6f, 0x75, 0x74, 0x29, 0x29, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x61, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x3c, 0x6d, 0x69,
	0x6e, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x20, 0x2f, 0x20, 0x28,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0xda, 0xab, 0x30, 0x00, 0xe2,
	0xab, 0x30, 0x41, 0x6c, 0x61, 0x73, 0x74, 0x28, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31,
	0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75,
	0x74, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e,
	0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x2c,
	0x20, 0x74, 0x73, 0x29, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0c, 0xe2, 0xab, 0x30, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x2a, 0x29,
	0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x30, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30,
	0x42, 0x75, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xda, 0xab, 0x30, 0x00, 0xe2,
	0xab, 0x30, 0x10, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f, 0x6f,
	0x75, 0x74, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c, 0x6c,
	0x12, 0x38, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x0f, 0x73,
	0x75, 0x6d, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x69, 0x6e, 0x29, 0x52, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x10, 0x73, 0x75, 0x6d, 0x28, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x5f, 0x6f, 0x75, 0x74, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x31, 0x53, 0x65, 0x6c, 0x6c, 0x3a, 0x7f, 0xca, 0xab, 0x30, 0x0b, 0x0a, 0x09, 0x1a,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x1a, 0x01, 0x74, 0xd2, 0xab, 0x30, 0x6c, 0x0a, 0x1f, 0x6c, 0x6f,
	0x74, 0x75, 0x73, 0x2e, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x32, 0x2e, 0x30, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x01, 0x22,
	0x06, 0x31, 0x20, 0x68, 0x6f, 0x75, 0x72, 0x2a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x32,
	0x01, 0x74, 0x32, 0x04, 0x70, 0x61, 0x69, 0x72, 0x3a, 0x1e, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x2b, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x5f,
	0x6f, 0x75, 0x74, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x79, 0x6c, 0x6f, 0x74, 0x75, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x75, 0x6e, 0x69, 0x73, 0x77,
	0x61, 0x70, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x69, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pair_pair_proto_rawDescOnce sync.Once
	file_pair_pair_proto_rawDescData = file_pair_pair_proto_rawDesc
)

func file_pair_pair_proto_rawDescGZIP() []byte {
	file_pair_pair_proto_rawDescOnce.Do(func() {
		file_pair_pair_proto_rawDescData = protoimpl.X.CompressGZIP(file_pair_pair_proto_rawDescData)
	})
	return file_pair_pair_proto_rawDescData
}

var file_pair_pair_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_pair_pair_proto_goTypes = []interface{}{
	(*Approval)(nil),              // 0: pair.Approval
	(*Burn)(nil),                  // 1: pair.Burn
	(*Mint)(nil),                  // 2: pair.Mint
	(*Swap)(nil),                  // 3: pair.Swap
	(*Sync)(nil),                  // 4: pair.Sync
	(*Transfer)(nil),              // 5: pair.Transfer
	(*Trade1Min)(nil),             // 6: pair.Trade1min
	(*Trade10Min)(nil),            // 7: pair.Trade10min
	(*Trade1H)(nil),               // 8: pair.Trade1h
	(*Trade1D)(nil),               // 9: pair.Trade1d
	(*Trade1Mon)(nil),             // 10: pair.Trade1mon
	(*Trade1Y)(nil),               // 11: pair.Trade1y
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_pair_pair_proto_depIdxs = []int32{
	12, // 0: pair.Approval.ts:type_name -> google.protobuf.Timestamp
	12, // 1: pair.Burn.ts:type_name -> google.protobuf.Timestamp
	12, // 2: pair.Mint.ts:type_name -> google.protobuf.Timestamp
	12, // 3: pair.Swap.ts:type_name -> google.protobuf.Timestamp
	12, // 4: pair.Sync.ts:type_name -> google.protobuf.Timestamp
	12, // 5: pair.Transfer.ts:type_name -> google.protobuf.Timestamp
	12, // 6: pair.Trade1min.t:type_name -> google.protobuf.Timestamp
	12, // 7: pair.Trade10min.t:type_name -> google.protobuf.Timestamp
	12, // 8: pair.Trade1h.t:type_name -> google.protobuf.Timestamp
	12, // 9: pair.Trade1d.t:type_name -> google.protobuf.Timestamp
	12, // 10: pair.Trade1mon.t:type_name -> google.protobuf.Timestamp
	12, // 11: pair.Trade1y.t:type_name -> google.protobuf.Timestamp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pair_pair_proto_init() }
func file_pair_pair_proto_init() {
	if File_pair_pair_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pair_pair_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Approval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Burn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade1Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade10Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade1H); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade1D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade1Mon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pair_pair_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade1Y); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pair_pair_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pair_pair_proto_goTypes,
		DependencyIndexes: file_pair_pair_proto_depIdxs,
		MessageInfos:      file_pair_pair_proto_msgTypes,
	}.Build()
	File_pair_pair_proto = out.File
	file_pair_pair_proto_rawDesc = nil
	file_pair_pair_proto_goTypes = nil
	file_pair_pair_proto_depIdxs = nil
}
