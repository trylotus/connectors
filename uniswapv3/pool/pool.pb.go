// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pool/pool.proto

package pool

import (
	_ "github.com/trylotus/go-lotus-proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Burn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pool        []byte                 `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`                             // Address
	Owner       []byte                 `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`                           // Address
	TickLower   int32                  `protobuf:"varint,7,opt,name=tick_lower,json=tickLower,proto3" json:"tick_lower,omitempty"` // int24
	TickUpper   int32                  `protobuf:"varint,8,opt,name=tick_upper,json=tickUpper,proto3" json:"tick_upper,omitempty"` // int24
	Amount      string                 `protobuf:"bytes,9,opt,name=amount,proto3" json:"amount,omitempty"`
	Amount0     string                 `protobuf:"bytes,10,opt,name=amount0,proto3" json:"amount0,omitempty"`
	Amount1     string                 `protobuf:"bytes,11,opt,name=amount1,proto3" json:"amount1,omitempty"`
}

func (x *Burn) Reset() {
	*x = Burn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Burn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Burn) ProtoMessage() {}

func (x *Burn) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Burn.ProtoReflect.Descriptor instead.
func (*Burn) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{0}
}

func (x *Burn) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Burn) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Burn) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Burn) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Burn) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Burn) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Burn) GetTickLower() int32 {
	if x != nil {
		return x.TickLower
	}
	return 0
}

func (x *Burn) GetTickUpper() int32 {
	if x != nil {
		return x.TickUpper
	}
	return 0
}

func (x *Burn) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Burn) GetAmount0() string {
	if x != nil {
		return x.Amount0
	}
	return ""
}

func (x *Burn) GetAmount1() string {
	if x != nil {
		return x.Amount1
	}
	return ""
}

type Collect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pool        []byte                 `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`                             // Address
	Owner       []byte                 `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`                           // Address
	Recipient   []byte                 `protobuf:"bytes,7,opt,name=recipient,proto3" json:"recipient,omitempty"`                   // Address
	TickLower   int32                  `protobuf:"varint,8,opt,name=tick_lower,json=tickLower,proto3" json:"tick_lower,omitempty"` // int24
	TickUpper   int32                  `protobuf:"varint,9,opt,name=tick_upper,json=tickUpper,proto3" json:"tick_upper,omitempty"` // int24
	Amount0     string                 `protobuf:"bytes,10,opt,name=amount0,proto3" json:"amount0,omitempty"`
	Amount1     string                 `protobuf:"bytes,11,opt,name=amount1,proto3" json:"amount1,omitempty"`
}

func (x *Collect) Reset() {
	*x = Collect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collect) ProtoMessage() {}

func (x *Collect) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collect.ProtoReflect.Descriptor instead.
func (*Collect) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{1}
}

func (x *Collect) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Collect) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Collect) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Collect) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Collect) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Collect) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Collect) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Collect) GetTickLower() int32 {
	if x != nil {
		return x.TickLower
	}
	return 0
}

func (x *Collect) GetTickUpper() int32 {
	if x != nil {
		return x.TickUpper
	}
	return 0
}

func (x *Collect) GetAmount0() string {
	if x != nil {
		return x.Amount0
	}
	return ""
}

func (x *Collect) GetAmount1() string {
	if x != nil {
		return x.Amount1
	}
	return ""
}

type CollectProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pool        []byte                 `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`           // Address
	Sender      []byte                 `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`       // Address
	Recipient   []byte                 `protobuf:"bytes,7,opt,name=recipient,proto3" json:"recipient,omitempty"` // Address
	Amount0     string                 `protobuf:"bytes,8,opt,name=amount0,proto3" json:"amount0,omitempty"`
	Amount1     string                 `protobuf:"bytes,9,opt,name=amount1,proto3" json:"amount1,omitempty"`
}

func (x *CollectProtocol) Reset() {
	*x = CollectProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectProtocol) ProtoMessage() {}

func (x *CollectProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectProtocol.ProtoReflect.Descriptor instead.
func (*CollectProtocol) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{2}
}

func (x *CollectProtocol) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *CollectProtocol) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *CollectProtocol) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *CollectProtocol) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *CollectProtocol) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *CollectProtocol) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *CollectProtocol) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *CollectProtocol) GetAmount0() string {
	if x != nil {
		return x.Amount0
	}
	return ""
}

func (x *CollectProtocol) GetAmount1() string {
	if x != nil {
		return x.Amount1
	}
	return ""
}

type Flash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pool        []byte                 `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`           // Address
	Sender      []byte                 `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`       // Address
	Recipient   []byte                 `protobuf:"bytes,7,opt,name=recipient,proto3" json:"recipient,omitempty"` // Address
	Amount0     string                 `protobuf:"bytes,8,opt,name=amount0,proto3" json:"amount0,omitempty"`
	Amount1     string                 `protobuf:"bytes,9,opt,name=amount1,proto3" json:"amount1,omitempty"`
	Paid0       string                 `protobuf:"bytes,10,opt,name=paid0,proto3" json:"paid0,omitempty"`
	Paid1       string                 `protobuf:"bytes,11,opt,name=paid1,proto3" json:"paid1,omitempty"`
}

func (x *Flash) Reset() {
	*x = Flash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flash) ProtoMessage() {}

func (x *Flash) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flash.ProtoReflect.Descriptor instead.
func (*Flash) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{3}
}

func (x *Flash) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Flash) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Flash) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Flash) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Flash) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Flash) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Flash) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Flash) GetAmount0() string {
	if x != nil {
		return x.Amount0
	}
	return ""
}

func (x *Flash) GetAmount1() string {
	if x != nil {
		return x.Amount1
	}
	return ""
}

func (x *Flash) GetPaid0() string {
	if x != nil {
		return x.Paid0
	}
	return ""
}

func (x *Flash) GetPaid1() string {
	if x != nil {
		return x.Paid1
	}
	return ""
}

type IncreaseObservationCardinalityNext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts                            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber                   uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash                        []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex                      uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pool                          []byte                 `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`                                                                                             // Address
	ObservationCardinalityNextOld uint32                 `protobuf:"varint,6,opt,name=observation_cardinality_next_old,json=observationCardinalityNextOld,proto3" json:"observation_cardinality_next_old,omitempty"` // uint16
	ObservationCardinalityNextNew uint32                 `protobuf:"varint,7,opt,name=observation_cardinality_next_new,json=observationCardinalityNextNew,proto3" json:"observation_cardinality_next_new,omitempty"` // uint16
}

func (x *IncreaseObservationCardinalityNext) Reset() {
	*x = IncreaseObservationCardinalityNext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseObservationCardinalityNext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseObservationCardinalityNext) ProtoMessage() {}

func (x *IncreaseObservationCardinalityNext) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseObservationCardinalityNext.ProtoReflect.Descriptor instead.
func (*IncreaseObservationCardinalityNext) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{4}
}

func (x *IncreaseObservationCardinalityNext) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *IncreaseObservationCardinalityNext) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *IncreaseObservationCardinalityNext) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *IncreaseObservationCardinalityNext) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *IncreaseObservationCardinalityNext) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *IncreaseObservationCardinalityNext) GetObservationCardinalityNextOld() uint32 {
	if x != nil {
		return x.ObservationCardinalityNextOld
	}
	return 0
}

func (x *IncreaseObservationCardinalityNext) GetObservationCardinalityNextNew() uint32 {
	if x != nil {
		return x.ObservationCardinalityNextNew
	}
	return 0
}

type Initialize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber  uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash       []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex     uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pool         []byte                 `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`                                       // Address
	SqrtPriceX96 string                 `protobuf:"bytes,6,opt,name=sqrt_price_x96,json=sqrtPriceX96,proto3" json:"sqrt_price_x96,omitempty"` // uint160
	Tick         int32                  `protobuf:"varint,7,opt,name=tick,proto3" json:"tick,omitempty"`                                      // int24
}

func (x *Initialize) Reset() {
	*x = Initialize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Initialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Initialize) ProtoMessage() {}

func (x *Initialize) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Initialize.ProtoReflect.Descriptor instead.
func (*Initialize) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{5}
}

func (x *Initialize) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Initialize) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Initialize) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Initialize) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Initialize) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Initialize) GetSqrtPriceX96() string {
	if x != nil {
		return x.SqrtPriceX96
	}
	return ""
}

func (x *Initialize) GetTick() int32 {
	if x != nil {
		return x.Tick
	}
	return 0
}

type Mint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash      []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pool        []byte                 `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`                             // Address
	Sender      []byte                 `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`                         // Address
	Owner       []byte                 `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`                           // Address
	TickLower   int32                  `protobuf:"varint,8,opt,name=tick_lower,json=tickLower,proto3" json:"tick_lower,omitempty"` // int24
	TickUpper   int32                  `protobuf:"varint,9,opt,name=tick_upper,json=tickUpper,proto3" json:"tick_upper,omitempty"` // int24
	Amount      string                 `protobuf:"bytes,10,opt,name=amount,proto3" json:"amount,omitempty"`
	Amount0     string                 `protobuf:"bytes,11,opt,name=amount0,proto3" json:"amount0,omitempty"`
	Amount1     string                 `protobuf:"bytes,12,opt,name=amount1,proto3" json:"amount1,omitempty"`
}

func (x *Mint) Reset() {
	*x = Mint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mint) ProtoMessage() {}

func (x *Mint) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mint.ProtoReflect.Descriptor instead.
func (*Mint) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{6}
}

func (x *Mint) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Mint) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Mint) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Mint) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Mint) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Mint) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Mint) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Mint) GetTickLower() int32 {
	if x != nil {
		return x.TickLower
	}
	return 0
}

func (x *Mint) GetTickUpper() int32 {
	if x != nil {
		return x.TickUpper
	}
	return 0
}

func (x *Mint) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Mint) GetAmount0() string {
	if x != nil {
		return x.Amount0
	}
	return ""
}

func (x *Mint) GetAmount1() string {
	if x != nil {
		return x.Amount1
	}
	return ""
}

type SetFeeProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber     uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash          []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex        uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pool            []byte                 `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`                                                 // Address
	FeeProtocol0Old uint32                 `protobuf:"varint,6,opt,name=fee_protocol0_old,json=feeProtocol0Old,proto3" json:"fee_protocol0_old,omitempty"` // uint8
	FeeProtocol1Old uint32                 `protobuf:"varint,7,opt,name=fee_protocol1_old,json=feeProtocol1Old,proto3" json:"fee_protocol1_old,omitempty"` // uint8
	FeeProtocol0New uint32                 `protobuf:"varint,8,opt,name=fee_protocol0_new,json=feeProtocol0New,proto3" json:"fee_protocol0_new,omitempty"` // uint8
	FeeProtocol1New uint32                 `protobuf:"varint,9,opt,name=fee_protocol1_new,json=feeProtocol1New,proto3" json:"fee_protocol1_new,omitempty"` // uint8
}

func (x *SetFeeProtocol) Reset() {
	*x = SetFeeProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFeeProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFeeProtocol) ProtoMessage() {}

func (x *SetFeeProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFeeProtocol.ProtoReflect.Descriptor instead.
func (*SetFeeProtocol) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{7}
}

func (x *SetFeeProtocol) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *SetFeeProtocol) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *SetFeeProtocol) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *SetFeeProtocol) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *SetFeeProtocol) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *SetFeeProtocol) GetFeeProtocol0Old() uint32 {
	if x != nil {
		return x.FeeProtocol0Old
	}
	return 0
}

func (x *SetFeeProtocol) GetFeeProtocol1Old() uint32 {
	if x != nil {
		return x.FeeProtocol1Old
	}
	return 0
}

func (x *SetFeeProtocol) GetFeeProtocol0New() uint32 {
	if x != nil {
		return x.FeeProtocol0New
	}
	return 0
}

func (x *SetFeeProtocol) GetFeeProtocol1New() uint32 {
	if x != nil {
		return x.FeeProtocol1New
	}
	return 0
}

type Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	BlockNumber  uint64                 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxHash       []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex     uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Pool         []byte                 `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`           // Address
	Sender       []byte                 `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`       // Address
	Recipient    []byte                 `protobuf:"bytes,7,opt,name=recipient,proto3" json:"recipient,omitempty"` // Address
	Amount0      string                 `protobuf:"bytes,8,opt,name=amount0,proto3" json:"amount0,omitempty"`
	Amount1      string                 `protobuf:"bytes,9,opt,name=amount1,proto3" json:"amount1,omitempty"`
	SqrtPriceX96 string                 `protobuf:"bytes,10,opt,name=sqrt_price_x96,json=sqrtPriceX96,proto3" json:"sqrt_price_x96,omitempty"` // uint160
	Liquidity    string                 `protobuf:"bytes,11,opt,name=liquidity,proto3" json:"liquidity,omitempty"`                             // uint128
	Tick         int32                  `protobuf:"varint,12,opt,name=tick,proto3" json:"tick,omitempty"`                                      // int24
}

func (x *Swap) Reset() {
	*x = Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

func (x *Swap) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{8}
}

func (x *Swap) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Swap) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Swap) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Swap) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *Swap) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Swap) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Swap) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Swap) GetAmount0() string {
	if x != nil {
		return x.Amount0
	}
	return ""
}

func (x *Swap) GetAmount1() string {
	if x != nil {
		return x.Amount1
	}
	return ""
}

func (x *Swap) GetSqrtPriceX96() string {
	if x != nil {
		return x.SqrtPriceX96
	}
	return ""
}

func (x *Swap) GetLiquidity() string {
	if x != nil {
		return x.Liquidity
	}
	return ""
}

func (x *Swap) GetTick() int32 {
	if x != nil {
		return x.Tick
	}
	return 0
}

type Trade1Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pool        []byte                 `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade1Min) Reset() {
	*x = Trade1Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade1Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade1Min) ProtoMessage() {}

func (x *Trade1Min) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade1Min.ProtoReflect.Descriptor instead.
func (*Trade1Min) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{9}
}

func (x *Trade1Min) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade1Min) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Trade1Min) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade1Min) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade1Min) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade1Min) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade1Min) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade1Min) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade1Min) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade1Min) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade1Min) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

type Trade10Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pool        []byte                 `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade10Min) Reset() {
	*x = Trade10Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade10Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade10Min) ProtoMessage() {}

func (x *Trade10Min) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade10Min.ProtoReflect.Descriptor instead.
func (*Trade10Min) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{10}
}

func (x *Trade10Min) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade10Min) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Trade10Min) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade10Min) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade10Min) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade10Min) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade10Min) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade10Min) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade10Min) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade10Min) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade10Min) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

type Trade1H struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pool        []byte                 `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade1H) Reset() {
	*x = Trade1H{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade1H) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade1H) ProtoMessage() {}

func (x *Trade1H) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade1H.ProtoReflect.Descriptor instead.
func (*Trade1H) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{11}
}

func (x *Trade1H) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade1H) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Trade1H) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade1H) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade1H) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade1H) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade1H) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade1H) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade1H) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade1H) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade1H) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

type Trade1D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pool        []byte                 `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade1D) Reset() {
	*x = Trade1D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade1D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade1D) ProtoMessage() {}

func (x *Trade1D) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade1D.ProtoReflect.Descriptor instead.
func (*Trade1D) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{12}
}

func (x *Trade1D) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade1D) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Trade1D) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade1D) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade1D) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade1D) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade1D) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade1D) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade1D) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade1D) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade1D) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

type Trade1Mon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pool        []byte                 `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade1Mon) Reset() {
	*x = Trade1Mon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade1Mon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade1Mon) ProtoMessage() {}

func (x *Trade1Mon) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade1Mon.ProtoReflect.Descriptor instead.
func (*Trade1Mon) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{13}
}

func (x *Trade1Mon) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade1Mon) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Trade1Mon) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade1Mon) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade1Mon) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade1Mon) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade1Mon) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade1Mon) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade1Mon) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade1Mon) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade1Mon) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

type Trade1Y struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	Pool        []byte                 `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	OpenPrice   string                 `protobuf:"bytes,3,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice   string                 `protobuf:"bytes,4,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice    string                 `protobuf:"bytes,5,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice  string                 `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	TxCount     int64                  `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Volume0Buy  string                 `protobuf:"bytes,8,opt,name=volume0_buy,json=volume0Buy,proto3" json:"volume0_buy,omitempty"`
	Volume0Sell string                 `protobuf:"bytes,9,opt,name=volume0_sell,json=volume0Sell,proto3" json:"volume0_sell,omitempty"`
	Volume1Buy  string                 `protobuf:"bytes,10,opt,name=volume1_buy,json=volume1Buy,proto3" json:"volume1_buy,omitempty"`
	Volume1Sell string                 `protobuf:"bytes,11,opt,name=volume1_sell,json=volume1Sell,proto3" json:"volume1_sell,omitempty"`
}

func (x *Trade1Y) Reset() {
	*x = Trade1Y{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pool_pool_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade1Y) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade1Y) ProtoMessage() {}

func (x *Trade1Y) ProtoReflect() protoreflect.Message {
	mi := &file_pool_pool_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade1Y.ProtoReflect.Descriptor instead.
func (*Trade1Y) Descriptor() ([]byte, []int) {
	return file_pool_pool_proto_rawDescGZIP(), []int{14}
}

func (x *Trade1Y) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *Trade1Y) GetPool() []byte {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Trade1Y) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *Trade1Y) GetHighPrice() string {
	if x != nil {
		return x.HighPrice
	}
	return ""
}

func (x *Trade1Y) GetLowPrice() string {
	if x != nil {
		return x.LowPrice
	}
	return ""
}

func (x *Trade1Y) GetClosePrice() string {
	if x != nil {
		return x.ClosePrice
	}
	return ""
}

func (x *Trade1Y) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *Trade1Y) GetVolume0Buy() string {
	if x != nil {
		return x.Volume0Buy
	}
	return ""
}

func (x *Trade1Y) GetVolume0Sell() string {
	if x != nil {
		return x.Volume0Sell
	}
	return ""
}

func (x *Trade1Y) GetVolume1Buy() string {
	if x != nil {
		return x.Volume1Buy
	}
	return ""
}

func (x *Trade1Y) GetVolume1Sell() string {
	if x != nil {
		return x.Volume1Sell
	}
	return ""
}

var File_pool_pool_proto protoreflect.FileDescriptor

var file_pool_pool_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6c, 0x6f, 0x74, 0x75, 0x73, 0x2f,
	0x6c, 0x6f, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x03, 0x0a, 0x04,
	0x42, 0x75, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02,
	0x08, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x12, 0x1e, 0x0a,
	0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x3a, 0x42, 0xca,
	0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a,
	0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x02, 0x74,
	0x73, 0x22, 0xbe, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30,
	0x02, 0x08, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2,
	0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x12, 0x1e,
	0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x3a, 0x42,
	0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x02,
	0x74, 0x73, 0x22, 0x8a, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab,
	0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab,
	0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x12, 0x1e, 0x0a, 0x07, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab,
	0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x3a, 0x42, 0xca, 0xab, 0x30,
	0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x14, 0x1a,
	0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x02, 0x74, 0x73, 0x22,
	0xb8, 0x03, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30,
	0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02,
	0x08, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30,
	0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x12, 0x1e,
	0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x12, 0x1a,
	0x0a, 0x05, 0x70, 0x61, 0x69, 0x64, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda,
	0xab, 0x30, 0x00, 0x52, 0x05, 0x70, 0x61, 0x69, 0x64, 0x30, 0x12, 0x1a, 0x0a, 0x05, 0x70, 0x61,
	0x69, 0x64, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52,
	0x05, 0x70, 0x61, 0x69, 0x64, 0x31, 0x3a, 0x42, 0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01,
	0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a,
	0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x02, 0x74, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x22, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x78,
	0x74, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x12, 0x47, 0x0a, 0x20, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x4e,
	0x65, 0x77, 0x3a, 0x42, 0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74, 0x73,
	0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x1a, 0x02, 0x74, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30,
	0x02, 0x08, 0x01, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x0e, 0x73, 0x71, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x78, 0x39, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xda, 0xab,
	0x30, 0x02, 0x08, 0x32, 0x52, 0x0c, 0x73, 0x71, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x58,
	0x39, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x3a, 0x42, 0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01,
	0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a,
	0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x02, 0x74, 0x73, 0x22, 0xd3, 0x03, 0x0a, 0x04, 0x4d,
	0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08,
	0x01, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xda, 0xab, 0x30, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x07,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda,
	0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x12, 0x1e, 0x0a, 0x07,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda,
	0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x3a, 0x42, 0xca, 0xab,
	0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x14,
	0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x02, 0x74, 0x73,
	0x22, 0xb3, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08,
	0x01, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x30, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66,
	0x65, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x30, 0x4f, 0x6c, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x31, 0x5f,
	0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x31, 0x4f, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x65,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x30, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x30, 0x4e, 0x65, 0x77, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x31, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x31, 0x4e,
	0x65, 0x77, 0x3a, 0x42, 0xca, 0xab, 0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74, 0x73,
	0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x0a, 0x14, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x1a, 0x02, 0x74, 0x73, 0x22, 0xe7, 0x03, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70, 0x12,
	0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0xca, 0xab, 0x30, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1e,
	0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x30, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xda, 0xab, 0x30, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x12, 0x2c, 0x0a, 0x0e, 0x73, 0x71, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x78, 0x39, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xda, 0xab,
	0x30, 0x02, 0x08, 0x32, 0x52, 0x0c, 0x73, 0x71, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x58,
	0x39, 0x36, 0x12, 0x24, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xda, 0xab, 0x30, 0x02, 0x08, 0x27, 0x52, 0x09, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x3a, 0x42, 0xca, 0xab,
	0x30, 0x3e, 0x0a, 0x1a, 0x10, 0x01, 0x1a, 0x02, 0x74, 0x73, 0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x14,
	0x1a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x1a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x0a, 0x0a, 0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x02, 0x74, 0x73,
	0x22, 0xb6, 0x07, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x31, 0x6d, 0x69, 0x6e, 0x12, 0x46,
	0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1c, 0xe2, 0xab, 0x30, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x27, 0x31, 0x20, 0x6d, 0x69, 0x6e, 0x27, 0x2c, 0x20,
	0x74, 0x73, 0x29, 0x52, 0x01, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0xe2, 0xab, 0x30, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x26, 0x66, 0x69, 0x72, 0x73, 0x74, 0x28, 0x61, 0x62,
	0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73,
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xda,
	0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x29, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x20, 0x6d,
	0x69, 0x6e, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20,
	0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x29, 0x52,
	0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x25, 0x6c, 0x61, 0x73, 0x74, 0x28, 0x61, 0x62, 0x73,
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x78, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xe2, 0xab, 0x30,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x2a, 0x29, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x62, 0x75,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30,
	0x33, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x3c, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20,
	0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20,
	0x65, 0x6e, 0x64, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x42, 0x75, 0x79,
	0x12, 0x5d, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x32,
	0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e,
	0x64, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c, 0x6c, 0x12,
	0x5c, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x33, 0x73, 0x75,
	0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x20, 0x3c, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x2d, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64,
	0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12, 0x5d, 0x0a,
	0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x32, 0x73, 0x75, 0x6d,
	0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x31, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52,
	0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x53, 0x65, 0x6c, 0x6c, 0x3a, 0x6b, 0xca, 0xab,
	0x30, 0x0b, 0x0a, 0x09, 0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x01, 0x74, 0xd2, 0xab, 0x30,
	0x58, 0x0a, 0x1f, 0x6c, 0x6f, 0x74, 0x75, 0x73, 0x2e, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70,
	0x76, 0x33, 0x2e, 0x30, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x53, 0x77,
	0x61, 0x70, 0x10, 0x01, 0x22, 0x05, 0x31, 0x20, 0x6d, 0x69, 0x6e, 0x2a, 0x16, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x6f, 0x75, 0x73, 0x32, 0x01, 0x74, 0x32, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x0b, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x3e, 0x20, 0x30, 0x22, 0xb9, 0x07, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x31, 0x30, 0x6d, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x1d, 0xe2, 0xab, 0x30, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x28, 0x27, 0x31, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x27, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x01,
	0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x0e, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0xe2, 0xab, 0x30, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x52,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xda, 0xab, 0x30, 0x00, 0xe2,
	0xab, 0x30, 0x26, 0x66, 0x69, 0x72, 0x73, 0x74, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab,
	0x30, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x29, 0x29, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a,
	0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x61, 0x62,
	0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73,
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xda, 0xab, 0x30, 0x00, 0xe2,
	0xab, 0x30, 0x25, 0x6c, 0x61, 0x73, 0x74, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x30, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xe2, 0xab, 0x30, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x28, 0x2a, 0x29, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a,
	0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3b, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x33, 0x73, 0x75, 0x6d, 0x28,
	0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x30, 0x20, 0x3c, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x2d, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52,
	0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x42, 0x75, 0x79, 0x12, 0x5d, 0x0a, 0x0c, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x32, 0x73, 0x75, 0x6d, 0x28, 0x63,
	0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x20, 0x3e, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x30, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x0b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3b, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x33, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73,
	0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x3c,
	0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31,
	0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12, 0x5d, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a,
	0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x32, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x3e, 0x20,
	0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x65,
	0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x31, 0x53, 0x65, 0x6c, 0x6c, 0x3a, 0x6c, 0xca, 0xab, 0x30, 0x0b, 0x0a, 0x09, 0x1a,
	0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x01, 0x74, 0xd2, 0xab, 0x30, 0x59, 0x0a, 0x1f, 0x6c, 0x6f,
	0x74, 0x75, 0x73, 0x2e, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x33, 0x2e, 0x30, 0x5f,
	0x30, 0x5f, 0x30, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x01, 0x22,
	0x06, 0x31, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x2a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x32,
	0x01, 0x74, 0x32, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x30, 0x20, 0x3e, 0x20, 0x30, 0x22, 0xb7, 0x07, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x31,
	0x68, 0x12, 0x48, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1e, 0xe2, 0xab, 0x30, 0x1a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x27, 0x31, 0x30, 0x20, 0x68, 0x6f,
	0x75, 0x72, 0x27, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x01, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xd2, 0xab, 0x30, 0x02, 0x08,
	0x01, 0xe2, 0xab, 0x30, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x4d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x26, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20,
	0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x2c, 0x20,
	0x74, 0x73, 0x29, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x47,
	0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x20, 0x6d, 0x61, 0x78, 0x28,
	0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61,
	0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x29, 0x52, 0x09, 0x68, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xda, 0xab, 0x30, 0x00,
	0xe2, 0xab, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x30, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4e,
	0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x25, 0x6c, 0x61, 0x73,
	0x74, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f,
	0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x2c, 0x20, 0x74,
	0x73, 0x29, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0c, 0xe2, 0xab, 0x30, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x2a, 0x29, 0x52, 0x07,
	0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x30, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xda, 0xab,
	0x30, 0x00, 0xe2, 0xab, 0x30, 0x33, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x3c, 0x20, 0x30, 0x20,
	0x74, 0x68, 0x65, 0x6e, 0x20, 0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x65, 0x6c,
	0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x30, 0x42, 0x75, 0x79, 0x12, 0x5d, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xda, 0xab, 0x30,
	0x00, 0xe2, 0xab, 0x30, 0x32, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x74,
	0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x65, 0x6c, 0x73, 0x65,
	0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30,
	0x53, 0x65, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f,
	0x62, 0x75, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xda, 0xab, 0x30, 0x00, 0xe2,
	0xab, 0x30, 0x33, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x3c, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65,
	0x6e, 0x20, 0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20,
	0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x42,
	0x75, 0x79, 0x12, 0x5d, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab,
	0x30, 0x32, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20,
	0x65, 0x6e, 0x64, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x53, 0x65, 0x6c,
	0x6c, 0x3a, 0x6c, 0xca, 0xab, 0x30, 0x0b, 0x0a, 0x09, 0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a,
	0x01, 0x74, 0xd2, 0xab, 0x30, 0x59, 0x0a, 0x1f, 0x6c, 0x6f, 0x74, 0x75, 0x73, 0x2e, 0x75, 0x6e,
	0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x33, 0x2e, 0x30, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x01, 0x22, 0x06, 0x31, 0x30, 0x20, 0x6d, 0x69,
	0x6e, 0x2a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x32, 0x01, 0x74, 0x32, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x3a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x3e, 0x20, 0x30, 0x22,
	0xb5, 0x07, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x31, 0x64, 0x12, 0x46, 0x0a, 0x01, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x1c, 0xe2, 0xab, 0x30, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x28, 0x27, 0x31, 0x20, 0x64, 0x61, 0x79, 0x27, 0x2c, 0x20, 0x74, 0x73, 0x29,
	0x52, 0x01, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x0e, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0xe2, 0xab, 0x30, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xda, 0xab, 0x30,
	0x00, 0xe2, 0xab, 0x30, 0x26, 0x66, 0x69, 0x72, 0x73, 0x74, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xda, 0xab, 0x30, 0x00,
	0xe2, 0xab, 0x30, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x30, 0x29, 0x29, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x45, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x28,
	0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61,
	0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xda, 0xab, 0x30,
	0x00, 0xe2, 0xab, 0x30, 0x25, 0x6c, 0x61, 0x73, 0x74, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x30, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xe2, 0xab, 0x30, 0x08, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x28, 0x2a, 0x29, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x5c, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x33, 0x73, 0x75,
	0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x20, 0x3c, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x2d, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64,
	0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x42, 0x75, 0x79, 0x12, 0x5d, 0x0a,
	0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x32, 0x73, 0x75, 0x6d,
	0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x30, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52,
	0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x0b,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3b, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x33, 0x73, 0x75, 0x6d, 0x28, 0x63,
	0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31,
	0x20, 0x3c, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x31, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12, 0x5d, 0x0a, 0x0c, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x32, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61,
	0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20,
	0x3e, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31,
	0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x31, 0x53, 0x65, 0x6c, 0x6c, 0x3a, 0x6c, 0xca, 0xab, 0x30, 0x0b, 0x0a,
	0x09, 0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x01, 0x74, 0xd2, 0xab, 0x30, 0x59, 0x0a, 0x1f,
	0x6c, 0x6f, 0x74, 0x75, 0x73, 0x2e, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x33, 0x2e,
	0x30, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10,
	0x01, 0x22, 0x06, 0x31, 0x20, 0x68, 0x6f, 0x75, 0x72, 0x2a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x32, 0x01, 0x74, 0x32, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x0b, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x30, 0x20, 0x3e, 0x20, 0x30, 0x22, 0xb9, 0x07, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x31, 0x6d, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1e, 0xe2, 0xab,
	0x30, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x27, 0x31,
	0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x27, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x01, 0x74, 0x12,
	0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xd2,
	0xab, 0x30, 0x02, 0x08, 0x01, 0xe2, 0xab, 0x30, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30,
	0x26, 0x66, 0x69, 0x72, 0x73, 0x74, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x30, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x20,
	0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29,
	0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x29,
	0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x61, 0x62, 0x73, 0x28,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x29, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30,
	0x25, 0x6c, 0x61, 0x73, 0x74, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xe2, 0xab, 0x30, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28,
	0x2a, 0x29, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3b, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x33, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61,
	0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20,
	0x3c, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x30, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0a, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x42, 0x75, 0x79, 0x12, 0x5d, 0x0a, 0x0c, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x32, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73,
	0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x3e,
	0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20,
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xda,
	0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x33, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x3c, 0x20, 0x30,
	0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x65,
	0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12, 0x5d, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xda, 0xab,
	0x30, 0x00, 0xe2, 0xab, 0x30, 0x32, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x3e, 0x20, 0x30, 0x20,
	0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x65, 0x6c, 0x73,
	0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x31, 0x53, 0x65, 0x6c, 0x6c, 0x3a, 0x6c, 0xca, 0xab, 0x30, 0x0b, 0x0a, 0x09, 0x1a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x1a, 0x01, 0x74, 0xd2, 0xab, 0x30, 0x59, 0x0a, 0x1f, 0x6c, 0x6f, 0x74, 0x75,
	0x73, 0x2e, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x33, 0x2e, 0x30, 0x5f, 0x30, 0x5f,
	0x30, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x53, 0x77, 0x61, 0x70, 0x10, 0x01, 0x22, 0x06, 0x31,
	0x20, 0x68, 0x6f, 0x75, 0x72, 0x2a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x32, 0x01, 0x74,
	0x32, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20,
	0x3e, 0x20, 0x30, 0x22, 0xb6, 0x07, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x31, 0x79, 0x12,
	0x47, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1d, 0xe2, 0xab, 0x30, 0x19, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x27, 0x31, 0x20, 0x79, 0x65, 0x61, 0x72, 0x27,
	0x2c, 0x20, 0x74, 0x73, 0x29, 0x52, 0x01, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xd2, 0xab, 0x30, 0x02, 0x08, 0x01, 0xe2, 0xab,
	0x30, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2e, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x26, 0x66, 0x69, 0x72, 0x73, 0x74, 0x28,
	0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61,
	0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x61, 0x62, 0x73,
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x29, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30,
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31,
	0x29, 0x20, 0x2f, 0x20, 0x61, 0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29,
	0x29, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x25, 0x6c, 0x61, 0x73, 0x74, 0x28, 0x61,
	0x62, 0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x29, 0x20, 0x2f, 0x20, 0x61, 0x62,
	0x73, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x29, 0x2c, 0x20, 0x74, 0x73, 0x29, 0x52,
	0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x74,
	0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0c, 0xe2,
	0xab, 0x30, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x2a, 0x29, 0x52, 0x07, 0x74, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f,
	0x62, 0x75, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xda, 0xab, 0x30, 0x00, 0xe2,
	0xab, 0x30, 0x33, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x3c, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65,
	0x6e, 0x20, 0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20,
	0x30, 0x20, 0x65, 0x6e, 0x64, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x42,
	0x75, 0x79, 0x12, 0x5d, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab,
	0x30, 0x32, 0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20,
	0x65, 0x6e, 0x64, 0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x30, 0x53, 0x65, 0x6c,
	0x6c, 0x12, 0x5c, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x62, 0x75, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x33,
	0x73, 0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x3c, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x2d,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65,
	0x6e, 0x64, 0x29, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x42, 0x75, 0x79, 0x12,
	0x5d, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xda, 0xab, 0x30, 0x00, 0xe2, 0xab, 0x30, 0x32, 0x73,
	0x75, 0x6d, 0x28, 0x63, 0x61, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x30, 0x20, 0x65, 0x6e, 0x64,
	0x29, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x53, 0x65, 0x6c, 0x6c, 0x3a, 0x6c,
	0xca, 0xab, 0x30, 0x0b, 0x0a, 0x09, 0x1a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x01, 0x74, 0xd2,
	0xab, 0x30, 0x59, 0x0a, 0x1f, 0x6c, 0x6f, 0x74, 0x75, 0x73, 0x2e, 0x75, 0x6e, 0x69, 0x73, 0x77,
	0x61, 0x70, 0x76, 0x33, 0x2e, 0x30, 0x5f, 0x30, 0x5f, 0x30, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x53, 0x77, 0x61, 0x70, 0x10, 0x01, 0x22, 0x06, 0x31, 0x20, 0x68, 0x6f, 0x75, 0x72, 0x2a, 0x16,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x32, 0x01, 0x74, 0x32, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x3a,
	0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x20, 0x3e, 0x20, 0x30, 0x42, 0x2f, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x79, 0x6c, 0x6f,
	0x74, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x75,
	0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x76, 0x33, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pool_pool_proto_rawDescOnce sync.Once
	file_pool_pool_proto_rawDescData = file_pool_pool_proto_rawDesc
)

func file_pool_pool_proto_rawDescGZIP() []byte {
	file_pool_pool_proto_rawDescOnce.Do(func() {
		file_pool_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_pool_pool_proto_rawDescData)
	})
	return file_pool_pool_proto_rawDescData
}

var file_pool_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_pool_pool_proto_goTypes = []interface{}{
	(*Burn)(nil),            // 0: pool.Burn
	(*Collect)(nil),         // 1: pool.Collect
	(*CollectProtocol)(nil), // 2: pool.CollectProtocol
	(*Flash)(nil),           // 3: pool.Flash
	(*IncreaseObservationCardinalityNext)(nil), // 4: pool.IncreaseObservationCardinalityNext
	(*Initialize)(nil),                         // 5: pool.Initialize
	(*Mint)(nil),                               // 6: pool.Mint
	(*SetFeeProtocol)(nil),                     // 7: pool.SetFeeProtocol
	(*Swap)(nil),                               // 8: pool.Swap
	(*Trade1Min)(nil),                          // 9: pool.Trade1min
	(*Trade10Min)(nil),                         // 10: pool.Trade10min
	(*Trade1H)(nil),                            // 11: pool.Trade1h
	(*Trade1D)(nil),                            // 12: pool.Trade1d
	(*Trade1Mon)(nil),                          // 13: pool.Trade1mon
	(*Trade1Y)(nil),                            // 14: pool.Trade1y
	(*timestamppb.Timestamp)(nil),              // 15: google.protobuf.Timestamp
}
var file_pool_pool_proto_depIdxs = []int32{
	15, // 0: pool.Burn.ts:type_name -> google.protobuf.Timestamp
	15, // 1: pool.Collect.ts:type_name -> google.protobuf.Timestamp
	15, // 2: pool.CollectProtocol.ts:type_name -> google.protobuf.Timestamp
	15, // 3: pool.Flash.ts:type_name -> google.protobuf.Timestamp
	15, // 4: pool.IncreaseObservationCardinalityNext.ts:type_name -> google.protobuf.Timestamp
	15, // 5: pool.Initialize.ts:type_name -> google.protobuf.Timestamp
	15, // 6: pool.Mint.ts:type_name -> google.protobuf.Timestamp
	15, // 7: pool.SetFeeProtocol.ts:type_name -> google.protobuf.Timestamp
	15, // 8: pool.Swap.ts:type_name -> google.protobuf.Timestamp
	15, // 9: pool.Trade1min.t:type_name -> google.protobuf.Timestamp
	15, // 10: pool.Trade10min.t:type_name -> google.protobuf.Timestamp
	15, // 11: pool.Trade1h.t:type_name -> google.protobuf.Timestamp
	15, // 12: pool.Trade1d.t:type_name -> google.protobuf.Timestamp
	15, // 13: pool.Trade1mon.t:type_name -> google.protobuf.Timestamp
	15, // 14: pool.Trade1y.t:type_name -> google.protobuf.Timestamp
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pool_pool_proto_init() }
func file_pool_pool_proto_init() {
	if File_pool_pool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pool_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Burn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseObservationCardinalityNext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Initialize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFeeProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade1Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade10Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade1H); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade1D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade1Mon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pool_pool_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade1Y); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pool_pool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pool_pool_proto_goTypes,
		DependencyIndexes: file_pool_pool_proto_depIdxs,
		MessageInfos:      file_pool_pool_proto_msgTypes,
	}.Build()
	File_pool_pool_proto = out.File
	file_pool_pool_proto_rawDesc = nil
	file_pool_pool_proto_goTypes = nil
	file_pool_pool_proto_depIdxs = nil
}
