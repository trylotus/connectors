package {{$.ContractName}}

import (
	"fmt"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/rs/zerolog/log"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/timestamppb"
	"github.com/trylotus/go-connector/common"
)

type SmartContract struct {
	Addr string
	Abi  abi.ABI
}

func NewContract(addr string) *SmartContract {
	contractAbi, err := abi.JSON(strings.NewReader({{$.ContractName | ToCamel}}MetaData.ABI))
	if err != nil {
		log.Fatal().Err(err).Msg("error reading abi")
	}
	return &SmartContract{Addr: addr, Abi: contractAbi}
}

func (c *SmartContract) Address() string {
	return c.Addr
}

func (c *SmartContract) Message(vLog types.Log, ts *timestamppb.Timestamp) (proto.Message, error) {
	ev, err := c.Abi.EventByID(vLog.Topics[0])
	if err != nil {
		return nil, fmt.Errorf("cannot find event by ID: %v", err)
	}
	switch ev.Name {

/* Code generated by https://github.com/trylotus/connector-bot. DO NOT EDIT */
{{/* CodeConversionTemplate: for each proto message
case "Approval":
	event := new(ABIApproval)
	if err := common.UnpackLog(c.Abi, event, ev.Name, vLog); err != nil {
		return nil, fmt.Errorf("error unpacking event: %s", ev.Name)
	}
	return &Approval{
		Ts:          ts,
		BlockNumber: vLog.BlockNumber,
		TxHash:      vLog.TxHash.Bytes(),
		Index:       uint64(vLog.Index),
		Src:         event.Src.String(),
		Guy:         event.Guy.String(),
		Wad:         event.Wad.Bytes(),
	}, nil
*/}}

{{range $idx, $eventData := $.ABI2ProtoBuilderParams.EventData }}
case "{{ $eventData.EventName }}":
	event := new({{ $eventData.GoEventStructName }})
	if err := common.UnpackLog(c.Abi, event, ev.Name, vLog); err != nil {
		return nil, fmt.Errorf("error unpacking event: %s", ev.Name)
	}
	protoMsg := &{{ $eventData.GoProtoStructName }}{
		Ts:          ts,
		BlockNumber: vLog.BlockNumber,
		TxHash:      vLog.TxHash.Bytes(),
		Index:       uint64(vLog.Index),
{{ range $leftSide, $rightSide := $eventData.GoProtoStructFieldInit }}
		{{$leftSide}}: {{$rightSide}},{{end}}
	}

{{ range $sliceFieldName, $sliceItemGetter := $eventData.GoProtoStructFieldInitForSlice }}
	for _, v := range event.{{$sliceFieldName}} {
		protoMsg.{{$sliceFieldName}} = append(protoMsg.{{$sliceFieldName}}, {{$sliceItemGetter}})
	}
{{end}}
	return protoMsg, nil

{{end}}

/* Code generated by https://github.com/trylotus/connector-bot. DO NOT EDIT */

	default:
		return nil, fmt.Errorf("invalid event: %s", ev.Name)
	}
}
